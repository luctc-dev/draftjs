{"version":3,"sources":["examples/ContentState.tsx","examples/CreateContentState.tsx","examples/SelectionState.tsx","examples/HashTags.tsx","routers.ts","examples/Simple.tsx","examples/Entity.tsx","examples/RichUtilsSimple.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getJsonString","editorState","contentState","getCurrentContent","rawJson","Draft","convertToRaw","jsonStr","JSON","stringify","plainText","getPlainText","jsonObject","getJsonSelectionString","selectionState","getSelection","anchorKey","getAnchorKey","anchorOffset","getAnchorOffset","focusKey","getFocusKey","focusOffset","getFocusOffset","isBackwards","getIsBackward","jsonSelectionState","compositeDecorator","CompositeDecorator","strategy","block","callback","result","text","getText","regex","exec","start","index","length","component","props","style","backgroundColor","children","path","useState","EditorState","createEmpty","setEditorState","gutter","span","orientation","className","onChange","newEditorState","isJsonView","setIsJsonView","onClick","shape","type","icon","EyeOutlined","Search","size","enterButton","defaultValue","onSearch","ContentState","createFromText","createWithContent","html","convertFromHTML","contentBlocks","entityMap","createFromBlockArray","convertFromRaw","width","visible","onOk","onCancel","onFinish","values","newSelection","merge","forceSelection","handleSetSelection","parseInt","Item","name","placeholder","htmlType","retrievedData","selectionKey","getStartKey","contentstate","entityKey","getBlockForKey","getEntityAt","getStartOffset","getEntity","getData","storedText","getEntityAtCursor","data","mutabilaty","createEntity","getLastCreatedEntityKey","newContentState","Modifier","applyEntity","push","handleSetEntity","initialValues","Option","value","color","handleKeyCommand","command","RichUtils","toggleInlineStyle","dangerouslySetInnerHTML","__html","rawContentState","draftToHtml","trigger","separator","getPreviewHTML","Header","Layout","Sider","Content","App","state","collapsed","toggle","setState","pathname","this","location","collapsible","to","theme","mode","defaultSelectedKeys","selectedKeys","ROUTERS","map","o","key","padding","MenuUnfoldOutlined","MenuFoldOutlined","src","process","alt","React","Component","withRouter","Boolean","window","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.284d45e5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Draft, { Editor, EditorState } from 'draft-js';\nimport { Row, Col, Divider } from 'antd';\n\nexport function getJsonString(editorState: EditorState) {\n  const contentState = editorState.getCurrentContent();\n  const rawJson = Draft.convertToRaw(contentState); // This is important\n  const jsonStr = JSON.stringify(rawJson, null, 1);\n  const plainText = contentState.getPlainText();\n\n  return {\n    jsonStr,\n    plainText\n  };\n}\n\nexport default function ContentState() {\n\n  const [editorState, setEditorState] = useState(\n    EditorState.createEmpty()\n  );\n\n  function handleOnChange(newEditorState: EditorState) {\n    setEditorState(newEditorState);\n  }\n\n  const { jsonStr, plainText } = getJsonString(editorState);\n  return (\n    <Row gutter={30}>\n      <Col span={24}>\n        <h1>Content state</h1>\n        <p>The ContentState object represents</p>\n        <ul>\n          <li>text in an array of blocks.</li>\n          <li>Entities (metadata that accompanies some text)</li>\n        </ul>\n        <p>In this sample you can observe what happens when you type some text. The resulting JSON can be stored in a database to recreate the ContentState at a later stage The content within a ContentState can be retrieved as follows:</p>\n      </Col>\n      <Col span={12}>\n\n        <Divider orientation=\"left\">Editor</Divider>\n\n        <div className=\"editor\">\n          <Editor\n            editorState={editorState}\n            onChange={handleOnChange}\n          />\n        </div>\n\n        <Divider orientation=\"left\">Plaintext retrieve from contentState</Divider>\n        <p>{plainText}</p>\n\n      </Col>\n\n      <Col span={12}>\n        <Divider orientation=\"left\">Json View</Divider>\n        <pre>{jsonStr}</pre>\n      </Col>\n\n    </Row>\n  );\n}","import React, { useState } from 'react';\nimport Draft, { Editor, EditorState } from 'draft-js';\nimport { Row, Col, Divider, Input, Button, Modal } from 'antd';\nimport { EyeOutlined } from '@ant-design/icons';\nimport { getJsonString } from './ContentState';\n\nconst jsonObject = {\n\t\"entityMap\": {},\n\t\"blocks\": [\n\t\t{\n\t\t\t\"key\": \"5h45l\",\n\t\t\t\"text\": \"the quick brown fox jumps over the lazy dog \",\n\t\t\t\"type\": \"unstyled\",\n\t\t\t\"depth\": 0,\n\t\t\t\"inlineStyleRanges\": [\n\t\t\t\t{\n\t\t\t\t\t\"offset\": 4,\n\t\t\t\t\t\"length\": 5,\n\t\t\t\t\t\"style\": \"ITALIC\"\n\t\t\t\t},\n\t\t\t\n\t\t\t\t{\n\t\t\t\t\t\"offset\": 10,\n\t\t\t\t\t\"length\": 5,\n\t\t\t\t\t\"style\": \"UNDERLINE\"\n\t\t\t\t},\n\t\t\t   {\n\t\t\t\t\t\"offset\": 16,\n\t\t\t\t\t\"length\": 3,\n\t\t\t\t\t\"style\": \"BOLD\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"entityRanges\": [],\n\t\t\t\"data\": {}\n\t\t}\n\t]\n}\n\n// console.log(Draft.DefaultDraftInlineStyle);\n\nexport default function ContentState() {\n  const [isJsonView, setIsJsonView] = useState(false);\n  const [editorState, setEditorState] = useState(\n    EditorState.createEmpty()\n  );\n  \n  function handleOnChange(newEditorState: EditorState) {\n    setEditorState(newEditorState);\n  }\n\n  function createWithPlainText(text: string) {\n    const contentState = Draft.ContentState.createFromText(text);\n    const newEditorState = Draft.EditorState.createWithContent(contentState);\n    setEditorState(newEditorState);\n  }\n\n  function createWithHTML(html: string) {\n    const { contentBlocks, entityMap } = Draft.convertFromHTML(html);\n    const contentState = Draft.ContentState.createFromBlockArray(contentBlocks, entityMap);\n    const newEditorState = Draft.EditorState.createWithContent(contentState);\n    setEditorState(newEditorState);\n  }\n\n  function createWithJsonObject() {\n    const contentState = Draft.convertFromRaw(jsonObject as Draft.RawDraftContentState);\n    const newEditorState = Draft.EditorState.createWithContent(contentState);\n    setEditorState(newEditorState);\n  }\n\n  return (\n    <Row gutter={30}>\n      <Col span={24}>\n        <h1>Creating content</h1>\n        <p>There will be times when we want to initiate an Edit control with text. To do this we must first create a new content state. There are a few ways to do this.</p>\n        <ul>\n          <li>plain text</li>\n          <li>HTML</li>\n          <li>a JSON object</li>\n        </ul>\n      </Col>\n\n      <Col span={12}>\n\n        <Divider \n          orientation=\"left\">\n            Editor \n            <Button onClick={() => setIsJsonView(true)} shape=\"circle\" type=\"primary\" icon={<EyeOutlined />} />\n        </Divider>\n\n        <div className=\"editor\">\n          <Editor\n            editorState={editorState}\n            onChange={handleOnChange}\n          />\n        </div>\n\n        {/* Create EditorState from the plain text */}\n        <Divider orientation=\"left\">Create from PlainText</Divider>\n        <Input.Search \n          size=\"large\" \n          enterButton=\"Create with text\"\n          defaultValue=\"This is a plain string of text\"\n          onSearch={createWithPlainText}\n        />\n\n        {/* Create EditorState from the HTML text */}\n        <Divider orientation=\"left\">Create from HTML</Divider>\n        <Input.Search \n          size=\"large\" \n          enterButton=\"Create with HTML\"\n          defaultValue=\"<h1>Header</h1> <b>Bold text</b>, <i>Italic text</i><br/ ><br />\"\n          onSearch={createWithHTML}\n        />\n\n        {/* Create EditorState from the Json Object */}\n        <Divider orientation=\"left\">Create from Json Object</Divider>\n        <Input.Search \n          size=\"large\"\n          className=\"json-object-input\"\n          enterButton=\"Create with JSON\"\n          defaultValue=\"See json in document on the right side\"\n          onSearch={createWithJsonObject}\n        />\n\n      </Col>\n\n      <Col span={12}>\n        <Divider orientation=\"left\">Json Document</Divider>\n        <pre>{JSON.stringify(jsonObject, null, 1)}</pre>\n      </Col>\n      \n\n      <Modal\n        width=\"600px\"\n        visible={isJsonView}\n        className=\"modal-json-view\"\n        onOk={() => setIsJsonView(false)}\n        onCancel={() => setIsJsonView(false)}\n      >\n        <pre>{getJsonString(editorState).jsonStr}</pre>\n      </Modal>\n    </Row>\n  );\n}","import React, { useState } from 'react';\nimport Draft, { Editor, EditorState } from 'draft-js';\nimport { EyeOutlined } from '@ant-design/icons';\nimport { Row, Col, Divider, Modal, Button, Input, Form } from 'antd';\nimport { getJsonString } from './ContentState';\n\nexport function getJsonSelectionString(editorState: EditorState) {\n  // the editorState has a getSelection() method to get the selection\n  const selectionState = editorState.getSelection();\n\n  // Sample of some data we can get from the selection state\n  const anchorKey = selectionState.getAnchorKey();\n  const anchorOffset = selectionState.getAnchorOffset();\n  const focusKey = selectionState.getFocusKey();\n  const focusOffset = selectionState.getFocusOffset();\n\n  const isBackwards = selectionState.getIsBackward();\n\n  const jsonStr = {\n    anchorKey,\n    anchorOffset,\n    focusKey,\n    focusOffset,\n    isBackwards\n  }\n\n  return {\n    jsonSelectionState: JSON.stringify(jsonStr, null, 1)\n  };\n}\n\nexport default function SelectionState() {\n  const [isJsonView, setIsJsonView] = useState(false);\n  const [editorState, setEditorState] = useState(() => {\n    const contentState = Draft.ContentState.createFromText('SelectionState represents the cursor, its position and what it is selecting. You can use selection to manipulate text such as inserting or deleting.');\n    return Draft.EditorState.createWithContent(contentState);\n  });\n\n  function handleOnChange(newEditorState: EditorState) {\n    setEditorState(newEditorState);\n  }\n\n  function handleSetSelection(anchorOffset: number, focusOffset: number) {\n    const selectionState = editorState.getSelection();\n\n    // We cannot set the selection state directly because its immutable.\n    // So make a copy  \n    const newSelection = selectionState.merge({\n      anchorOffset,\n      focusOffset,\n    }) as Draft.SelectionState;\n\n    // Draft API helper set the selection into a new editorState\n    const newEditorState = Draft.EditorState.forceSelection(editorState, newSelection);\n\n    // update the editorState \n    setEditorState(newEditorState);\n  }\n\n\n  function onSubmitForm(values: any) {\n    const anchorOffset = parseInt(values.anchorOffset || 0) || 0;\n    const focusOffset = parseInt(values.focusOffset || 0) || 0;\n\n    handleSetSelection(anchorOffset, focusOffset);\n  }\n\n  const { jsonSelectionState } = getJsonSelectionString(editorState);\n  return (\n    <Row gutter={30}>\n      {/* Introduction */}\n      <Col span={24}>\n        <h1>Selection editorState</h1>\n        <p>SelectionState represents the cursor, its position and what it is selecting. You can use selection to manipulate text such as inserting or deleting.</p>\n      </Col>\n\n      {/* Demo Editor */}\n      <Col span={12}>\n\n        <Divider\n          orientation=\"left\">\n          Editor\n            <Button onClick={() => setIsJsonView(true)} shape=\"circle\" type=\"primary\" icon={<EyeOutlined />} />\n        </Divider>\n\n        {/* Editor Draft-Js  */}\n        <div className=\"editor\">\n          <Editor\n            editorState={editorState}\n            onChange={handleOnChange}\n          />\n        </div>\n\n        <Divider orientation=\"left\">Set Selection by offset</Divider>\n        <Form onFinish={onSubmitForm} >\n          <Row gutter={30}>\n            {/* Anchor Offset Input */}\n            <Col span={12}>\n              <Form.Item name=\"anchorOffset\">\n                <Input size=\"large\" placeholder=\"Enter anchorOffset\" type=\"number\" />\n              </Form.Item>\n            </Col>\n\n            {/* Focus Offset Input */}\n            <Col span={12}>\n              <Form.Item name=\"focusOffset\">\n                <Input size=\"large\" placeholder=\"Enter focusOffset\" type=\"number\"/>\n              </Form.Item>\n            </Col>\n\n            {/* Button Submit */}\n            <Col span={24}>\n              <Button type=\"primary\" htmlType=\"submit\" size=\"large\">Set Selection</Button>\n            </Col>\n          </Row>\n        </Form>\n\n      </Col>\n\n      {/* Json View Selection State */}\n      <Col span={12}>\n        <Divider orientation=\"left\">Json View Selection State</Divider>\n        <pre>{jsonSelectionState}</pre>\n      </Col>\n\n      <Modal\n        width=\"600px\"\n        visible={isJsonView}\n        className=\"modal-json-view\"\n        onOk={() => setIsJsonView(false)}\n        onCancel={() => setIsJsonView(false)}\n      >\n        <pre>{getJsonString(editorState).jsonStr}</pre>\n      </Modal>\n    </Row>\n  );\n}","import React, { useState } from 'react';\nimport Draft, { Editor, EditorState } from 'draft-js';\nimport { Row, Col, Divider } from 'antd';\nimport draftToHtml from 'draftjs-to-html';\n\nconst regexStratergy = (block: Draft.ContentBlock, callback: (start: number, end: number) => void) => {\n  const text = block.getText();\n  let result: RegExpExecArray;\n  let regex = /(^|\\s)#\\w+/g;\n\n  // Lorem ipsum #hashtag1 Lorem ipsum #hashtag2\n  while ((result = regex.exec(text) as RegExpExecArray) != null) {\n    let start = result.index === 0 ? 0 : result.index + 1;\n    let end = start === 0 ? start + result[0].length : start + result[0].length - 1;\n    callback(start, end);\n  }\n};\n\nconst regexComponent = (props: any) => {\n  return (\n    <span style={{ backgroundColor: \"#dce6f8\" }}>{props.children}</span>\n  )\n}\n\nconst compositeDecorator = new Draft.CompositeDecorator([\n  {\n    strategy: regexStratergy,\n    component: regexComponent\n  }\n]);\n\nexport default function HashTags() {\n  const [editorState, setEditorState] = useState(\n    EditorState.createEmpty(compositeDecorator)\n  );\n\n  function handleOnChange(newEditorState: EditorState) {\n    setEditorState(newEditorState);\n  }\n  \n  function getPreviewHTML() {\n    const rawContentState = Draft.convertToRaw(editorState.getCurrentContent());\n    const markup = draftToHtml(\n      rawContentState, \n      {\n        trigger: '#',\n        separator: ' ',\n      }\n    );\n    return markup;\n  }\n\n  return (\n    <Row gutter={30}>\n      <Col span={24}>\n        <h1>use #tag regex to find matches</h1>\n      </Col>\n      <Col span={12}>\n        <Divider orientation=\"left\">Editor</Divider>\n\n        {/* Controlled Contenteditable */}\n        <div className=\"editor\">\n          <Editor\n            editorState={editorState}\n            onChange={handleOnChange}\n          />\n        </div>\n\n      </Col>\n\n      <Col span={12}>\n        <Divider orientation=\"left\">Preview</Divider>\n        <div className=\"preview\" dangerouslySetInnerHTML={{\n          __html: getPreviewHTML()\n        }}/>\n      </Col>\n    </Row>\n  );\n}","import Simple from \"./examples/Simple\";\nimport ContentState from './examples/ContentState';\nimport CreateContentState from './examples/CreateContentState';\nimport SelectionState from './examples/SelectionState';\nimport Entity from './examples/Entity';\nimport RichUtilsSimple from './examples/RichUtilsSimple';\nimport HashTags from './examples/HashTags';\n\nexport default [\n  {\n    path: '/simple',\n    text: 'Simple',\n    component: Simple\n  },\n  {\n    path: '/content-state',\n    text: 'ContentState',\n    component: ContentState\n  },\n  {\n    path: '/create-content-state',\n    text: 'Create ContentState',\n    component: CreateContentState\n  },\n  {\n    path: '/selection-state',\n    text: 'SelectionState',\n    component: SelectionState\n  },\n  {\n    path: '/entities',\n    text: 'Entities',\n    component: Entity\n  },\n  {\n    path: '/rich-utils',\n    text: 'Rich Utils Simple',\n    component: RichUtilsSimple\n  },\n  {\n    path: '/hashtags',\n    text: 'HashTags Simple',\n    component: HashTags\n  }\n]","import React, { useState } from 'react';\nimport { Editor, EditorState } from 'draft-js';\nimport { Row, Col, Divider } from 'antd';\n\n\nexport default function Simple() {\n  const [editorState, setEditorState] = useState(\n    EditorState.createEmpty()\n  );\n\n  function handleOnChange(newEditorState: EditorState) {\n    setEditorState(newEditorState);\n  }\n  \n  return (\n    <Row gutter={30}>\n      <Col span={12}>\n        <Divider orientation=\"left\">Editor</Divider>\n\n        {/* Controlled Contenteditable */}\n        <div className=\"editor\">\n          <Editor\n            editorState={editorState}\n            onChange={handleOnChange}\n          />\n        </div>\n\n      </Col>\n    </Row>\n  );\n}","import React, { useState } from 'react';\nimport Draft, { Editor, EditorState } from 'draft-js';\nimport { Row, Col, Divider, Form, Input, Button, Tag, Select } from 'antd';\nimport { getJsonString } from './ContentState';\nimport { getJsonSelectionString } from './SelectionState';\n\nfunction getEntityAtCursor(editorState: EditorState) {\n  const selectionState = editorState.getSelection();\n  const selectionKey = selectionState.getStartKey();\n  const contentstate = editorState.getCurrentContent();\n\n  // get the block where the cursor is\n  const block = contentstate.getBlockForKey(selectionKey);\n\n  // get the Entity key at the where the cursor is\n  const entityKey = block.getEntityAt(selectionState.getStartOffset());\n  \n  if (entityKey) {\n      // use the following method to get the entity instance\n      const entityInstance = contentstate.getEntity(entityKey);\n      const data = entityInstance.getData();\n      return data.storedText;\n  }\n\n  return '';\n}\n\nexport default function Entities() {\n  const [editorState, setEditorState] = useState(() => {\n    const contentState = Draft.ContentState.createFromText('I am a cat in french\\nI am walking on sunshine');\n    return Draft.EditorState.createWithContent(contentState);\n  });\n\n  function handleOnChange(newEditorState: EditorState) {\n    setEditorState(newEditorState);\n  }\n  \n  function handleSetEntity(data: string, mutabilaty: Draft.DraftEntityMutability = 'IMMUTABLE') {\n    const contentstate = editorState.getCurrentContent();\n  \n    // the entity is created from the content state and returns the actual entity\n    // we don't need the actual entity but we do need a key\n    contentstate.createEntity('myEntityIdentifier', mutabilaty, { storedText: data });\n  \n    // This is how we get the key\n    const entityKey = contentstate.getLastCreatedEntityKey();\n  \n    // get the current selection\n    const selectionState = editorState.getSelection();\n    \n    // associate the text in the selection (from - to) to the entety and get a new content state\n    const newContentState = Draft.Modifier.applyEntity(contentstate, selectionState, entityKey);\n  \n    // add the new content state to the existing editor state and return a new editorstate\n    const newEditorState = Draft.EditorState.push(editorState, newContentState, 'apply-entity');\n  \n    // update the Edit State\n    setEditorState(newEditorState);\n  }\n\n  function onSubmitForm(values: any) {\n    const data = values.data;\n    const mutabilaty = values.mutabilaty;\n\n    handleSetEntity(data, mutabilaty);\n  }\n\n  const { jsonStr } = getJsonString(editorState);\n  const retrievedData = getEntityAtCursor(editorState);\n  return (\n    <Row gutter={30}>\n      {/* Introduction */}\n      <Col span={24}>\n        <h1>Entities</h1>\n        <p>Entities allow you to store <strong>Metadata</strong> along with a section of text. The range of text is determined by a selection state</p>\n        <p>In the sample you can create an Entity by selecting a range of text and clicking the create entity button.</p>\n      </Col>\n\n      <Col span={12}>\n        <Divider orientation=\"left\">Editor</Divider>\n\n        {/* Controlled Contenteditable */}\n        <div className=\"editor\">\n          <Editor\n            editorState={editorState}\n            onChange={handleOnChange}\n          />\n        </div>\n\n        {/* Form create a entity */}\n        <Divider orientation=\"left\">Create an entity</Divider>\n        <Form onFinish={onSubmitForm} initialValues={{ data: '', mutabilaty: 'MUTABLE' }}>\n          <Row gutter={30}>\n            {/* Anchor Offset Input */}\n            <Col span={12}>\n              <Form.Item name=\"data\">\n                <Input size=\"large\" placeholder=\"Data string to save\" />\n              </Form.Item>\n            </Col>\n\n            {/* Focus Offset Input */}\n            <Col span={12}>\n              <Form.Item name=\"mutabilaty\">\n                <Select size=\"large\">\n                  <Select.Option value=\"MUTABLE\">MUTABLE</Select.Option>\n                  <Select.Option value=\"IMMUTABLE\">IMMUTABLE</Select.Option>\n                  <Select.Option value=\"SEGMENTED\">SEGMENTED</Select.Option>\n                </Select>\n              </Form.Item>\n            </Col>\n\n            {/* Button Submit */}\n            <Col span={12}>\n              <Button type=\"primary\" htmlType=\"submit\" size=\"large\">Set Selection</Button>\n            </Col>\n\n            {/* Retrieved Data based on selection state */}\n            <Col>\n              <h3>Retrieved Data { retrievedData && <Tag color=\"#87d068\">{retrievedData}</Tag> }</h3>\n            </Col>\n          </Row>\n        </Form>\n\n        {/* Json View of Selection State */}\n        <Divider orientation=\"left\">Json View Selection State</Divider>\n        <pre>{getJsonSelectionString(editorState).jsonSelectionState}</pre>\n      </Col>\n\n      <Col span={12}>\n        <Divider orientation=\"left\">Json View</Divider>\n        <pre>{jsonStr}</pre>\n      </Col>\n    </Row>\n  );\n}","import React, { useState } from 'react';\nimport Draft, { Editor, EditorState, RichUtils } from 'draft-js';\nimport { Row, Col, Divider } from 'antd';\nimport { getJsonString } from './ContentState';\n\n\nexport default function RichUtilsSimple() {\n  const [editorState, setEditorState] = useState(() => {\n    const contentState = Draft.ContentState.createFromText('I am a cat in french. I am walking on sunshine');\n    return EditorState.createWithContent(contentState);\n  });\n\n  function handleOnChange(newEditorState: EditorState) {\n    setEditorState(newEditorState);\n  }\n\n  const handleBoldShortcut = (): Draft.DraftHandleValue => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\n    return 'handled';\n  }\n  const handleItalicShortcut = (): Draft.DraftHandleValue => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\n    return 'handled';\n  }\n  const handleUnderlineShortcut = (): Draft.DraftHandleValue => {\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\n    return 'handled';\n  }\n\n  function handleKeyCommand (command: string): Draft.DraftHandleValue {\n    switch (command) {\n      case 'bold':\n        return handleBoldShortcut();\n      case 'italic':\n        return handleItalicShortcut();\n      case 'underline':\n        return handleUnderlineShortcut();\n      default:\n        return 'not-handled';\n    }\n  };\n  \n  const { jsonStr } = getJsonString(editorState);\n\n\n  return (\n    <Row gutter={30}>\n      <Col span={24}>\n        <h2>Try highlighting a section then press</h2>\n        <ul>\n          <li>Ctrl + B</li>\n          <li>Ctrl + U</li>\n          <li>Ctrl + I</li>\n        </ul>\n      </Col>\n      <Col span={12}>\n        <Divider orientation=\"left\">Editor</Divider>\n\n        {/* Controlled Contenteditable */}\n        <div className=\"editor\">\n          <Editor\n            editorState={editorState}\n            onChange={handleOnChange}\n            handleKeyCommand={handleKeyCommand}\n          />\n        </div>\n\n      </Col>\n\n      <Col span={12}>\n        <Divider orientation=\"left\">Json View</Divider>\n        <pre>{jsonStr}</pre>\n      </Col>\n    </Row>\n  );\n}","import 'draft-js/dist/Draft.css';\nimport React from 'react';\nimport { withRouter } from \"react-router\";\nimport { Layout, Menu } from 'antd';\nimport {\n  MenuFoldOutlined,\n  MenuUnfoldOutlined,\n} from '@ant-design/icons';\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nimport ROUTERS from './routers';\n\nconst { Header, Sider, Content } = Layout;\n\nclass App extends React.Component<any, any> {\n  state = {\n    collapsed: false,\n  };\n\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    const pathname = this.props.location?.pathname || '/simple';\n    return (\n      <Layout className=\"layout-custom\">\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\n          <Link to=\"/\"><div className=\"logo\" /></Link>\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['/simple']} selectedKeys={[pathname]}>\n            {\n              ROUTERS.map(o => {\n                return <Menu.Item key={o.path}><Link to={o.path}>{o.text}</Link></Menu.Item>\n              })\n            }\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n\n            {\n              this.state.collapsed\n                ? <MenuUnfoldOutlined className=\"trigger\" onClick={this.toggle} />\n                : <MenuFoldOutlined className=\"trigger\" onClick={this.toggle} />\n            }\n\n          </Header>\n          <Content className=\"site-layout-background site-layout-content\">\n            <Switch>\n\n              {\n                ROUTERS.map(o => {\n                  return (\n                    <Route path={o.path} key={o.path}>\n                      <o.component />\n                    </Route>\n                  )\n                })\n              }\n\n              <Route>\n                <img src={`${process.env.PUBLIC_URL}/editorstate.png`} alt=\"\" />\n              </Route>\n\n            </Switch>\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\n// @ts-ignore\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router basename=\"/draftjs\">\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}